Things that I would like to do someday ...

- 13 Jan 2019 - Add a function that when sitting on an arbitrary file name in a
   buffer will open that file.  Right now shu-project can open a file that is part
   of a project.  This would be a simple function that tries to open the file if it
   looks like a file name.  An example might be:

  /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/string.g



- 14 Jan 2019 - shu-replace-class-name calls shu-internal-replace-class-name to do
  the replacement.  But shu-internal-replace-class-name will not replace anything
  that is prefixed by ":".  That is because it was originally intended to add a
  namespace to a class and does not want to do that to a class that already has a
  namespace.  But in the case of class name replacement, we do want to replace
  qualified names.

- 16 Jan 2019 - shu-cpp-rmv-using will detect a class conflict if the same namespace
  is named twice, i.e. "using namespace std" twice in same file.  Need to filter
  duplicates before doing conflict checks.  DONE as of 1-25-19

- 16 Jan 2019 - shu-qualify-class name should put all of the classes into a single
  regexp.  That way you can do an entire file in one pass.  You find a match in the
  class name, look up its associated namespace, and then do the qulification.  So
  instead of one iteration per class or one iteration per namespace, you can do the
  entire thing in one iteration.  Use the logic from shu-cpp-rmv-blocked to build a
  reverse index of class to namespace.

- 18 Jan 2019 - In shu-internal-replace-class-name, if the class name is either
  surrounded by parens foo(std::time) or followed by an equal sign
  "int std::time = ", it is unlikely to be a class name.

  Here is the hard one.  If it is preceded by something that looks like a class
  name:

  bdlt::Datetime  time;

  "time" is very unlikely to be a class name.

- 21 Jan 2019 - Might be useful to allow people to enter their own short name for a
  file.  e.g., a frequently visited file has two long names to which it maps.  Have
  some way to indicate that a different, user supplied name maps to one of them.


- 25 Jan 2019 - Look into having shu-number-lines use (rectangle-number-lines)

DONE - 29 Jan 2019 - New way to generate include file name

      Put corsor on alice::MumbleBob and have function generate
      #include <alice_mumblebob.h>

- 1 Feb 2019

      Extend the above for names of the form alice_MumbleBob

DONE - 1 Feb 2019

  shu-hother, shu-tother, shu-cother just form the file name and try to open it in
  the current directoty.  But if your test files are in a unit_test directory, your
  code files in a src directory and the header files in an include directory this
  does not work.

  However, if a project exists, it knows where all of the tiles are.  You should be
  able to pass the name to the shu-project code and have it find it for you.

DONE - 4 Feb 2019

  The new versions of shu-hother, etc that use the project to resolve names are
  looking in the completing list.  The hother of nnnn_fooo.cpp is nnnn_fooo.h.  But
  if a foo.h also exists, the user is asked which one is desired.

DONE 9 Feb 2010 - The macro shu-cpp-token-extract-info should define its local variables
             with make-sumbol.

14 Feb 2019 - Add a hook function so that the "binclude" function can call the
hook for non-standard names that can be returned by the hook.  i.e., If hook
exists, pass the name to the hook.  If the hook returns a string, use that as the
name of the include file.  If the hook returns nil, then apply the default algorithm
to generate the bame of the include file.

14 Feb 2019 - Re-do shu-replace-class-name to use tokens instead.

  1. Tokenize the region (in reverse)

  2. Go through all tokens of type "unquoted symbol"

  3. See if this symbol matches a class name

  4. If there is a match, then look at the things directly in front of and following
     the unquoted symbol/  Things like "->" in front or "::" in front mean that it
     is probably not a class name that we wish to qualify.

  5. Build a new list of class names and their locations (in reverse)

  6. Go through the list adding the appropriate qualifiers to the names by simply
  going to the beginning point and prefixing it with the namespace name and "::'.
  No need for searching and replacing since you have found then all as tokens.
  Guarantees that things in comments and strings will be completely ignored.

  This means having an inverted alist in which the key is the class name and the
  value is the namespace.  This list only contans class names for namespaces that
  have been named on the "using namespace" directive.

20 Feb 2019 - Have make-c-project convert all of the directory names to relative
ones.  The actual list of directories stored by the project code has to hold
avsolute names because you can visit them from anywhere.  But it would make the
project files more portable if they held relative names.

See the elisp functions locate-dominiating-file and file-relative-name.

See also https://stackoverflow.com/questions/18366839/find-the-relative-path-of-a-file-in-a-project
