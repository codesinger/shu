12 Feb 2019


For dealing with tokens ...

Perhaps have a tokenization function that omits comments as they
are encountered?  Could simplufy subsequent processing.

Think back to the parser from RTS in Roseville.  Build a set of patterns
to match

Pointer to object

  1. Unquoted token (name)
  2. Operator "*"
  3. Unquoted token (class name)
  4. Operator "::"
  5. Unquoted token (namespace)


Const pointer to object

  1. Unquoted token (name)
  1. Unquoted token ("const")
  2. Operator "*"
  3. Unquoted token (class name)
  4. Operator "::"
  5. Unquoted token (namespace)


With the Roseville parser, you always started at the beginning of the string and
tried to match patterns against it.

In this case you are looking for a thing (semi-colon, unquoted token, etc) that
starts a pattern and then seeing if that has a pattern that matches it.

So you need an alist of things.  The key is a category, such as unquoted token, ";",
etc.  The value is a list of all of the patterns that start with that thing.

For finding a set of known class nsmes.

  1. Find an unquoted token

  2. See if it is one of the names we are looking for
     - If not, skip it

  3. If it is a sought after name, perhaps we can
     then use patterns to see if it is
     something we will consider to be a class name

Possible patterns to exclude a potential class name

  1. Is a C++ key word.  Be careful here.  "return" is a key word.  "right" and
     "setw" are class names.

  2. Does not match syntax of a class name

  3. Followed by "="

  4. Preceded by "->"

  5. Preceded by "."

  6. Preceded by {"#" "include" "<"} or by {"#" "include" "\""}

  7. Followed  by ";"??


============================================

- Each time you find an unquoted token that is not "namespace", save it.

- If you find namespace followed by using, you have one


18 Feb 2019

Things in the pattern list

  1. Op code
  2. Token type
  3. Comparison value
  4. Valuation function
  5. Return value indicator


============================================

Two things have to change.

  DONE 1. You cannot just use cons cells to build up a match list.  If you want to change
     the format of the match list, all of your manually =built lists are rubbish.

  DONE 2. There has to be a match type that is "pointer to other match list", perhaps
     with a count.

     Right now, the lists for "using namespace" come in mseveral flavors:

       using namespace a
       using namespace a::b
       using namespace a::b::c

     Each one is a saparate list.  Yoiu could have "using namespace a" followed by
     pointer to list of "::" followed by unquoted token and give a count of three.
     So the sub list may match up to three times to be considered successful, or
     something like that.

  3. Once you have a side pointer to another list to follow, you can also use that
     side pointer for a list of alternatives. e.g.,

               1. Keyword class
               2. Unquoted token
               3. "{" or ":"

  4, You can also use the side pointer for a list to be mached zero or more times

               1. Keyword class
               2. Unquoted token
               3. size list of "::" followed by unquoted toek

     If the side list is not matched at all, you have a simple class name.
     If it is matched once, you have a::b, etc.


============================================


11 March 2019

Re-think the real meaning of shu-cpp-match-repeat-list.

It is a function that can never fail.  It either harvests some repeating information
and advances the token list or it does nothing,  In either case, the scan resumes
with the new token-list (which my be unchanged).


============================================


22 July 2019

 1. The current side list functions assume that the rlist is empty on entry.  They
    build an rlist and then nreverse the whole thing.

    As of 23 July, this item is done.  None of the match functions should ever
    reverse anything because only the top level caller knows when it is done.

 2. Need some unit tests that call the side list functions with an existing,
    non-empty rlist to make sure that they just add their stuff at the end.

    As of 24 July, this item is done.

 3. Have a new function similar to shu-cpp-token-show-token-info in shu-cpp-token.el
    that can print an entire match list.  It is shu-cpp-token-show-match-list in
    shu-cpp-match.el.

    As of July 23, Done but needs some clean up.

 4. Need a unit test that actually incorporates a side list as part of a larger
    match.

    As of July 26, this is done

 5. Need a unit test like that in 4 above in which the side list match fails.

    Done as of July 27

 6. Need a unit test like that in 4 above in which the side list match succeeds but
    some subsequent match fails.

 7. Need a new side list function that says "match any of the following lists."
    Right now, the top level of shu-cpp-match-tokens is the only thing that can take
    a list of lists and try each one until a match is found or one of the lists
    match.  More useful if this is a side list function.  Then you can have a single
    list that matches "using namespace" followed by a choice of three lists for the
    three forms that a namespace name can take.  Should be handled by a recursive
    call to shu-cpp-match-tokens.

    As of 29 July, above has been implemented and somwhat tested.

    The thing to remember about this is that one of the match many's must succeed.
    The original unit test had three different name patternd in the many side list.
    Then the next thing to match (Not in the "many" side list) was the terminating
    semi-colon.  But if the semi-colon did not match, thre was nothing to indicate
    that we should go back and try more of the "many" side lists  The solution was
    to put the terminating semi-colon at the end of each of the "many" side-lists.
    So if the last thing in a list is a semi-comol that does not match, we then go
    try the next list.



 8. shu-cpp-match-tokens has an optional skip-comments argument that is generally
    not used, not tested, and probably not honored.  And has been removed because it
    could never work.

 9. Need a variant of match-tokens in which a single list is passed in and it keeps
    looping through the token list until there is a match for the first item in the
    list.  If a match fails, it continues loooping through the tokens until the
    first one matches.  It only returns when there is a successful match or there
    are no more tokens.


================================================================

Return values from match functions

shu-cpp-match-evaluate-side-list will break if nil returned to it from calling the
side list function.  Extracts new-rlist and new-token-list from cdr and car of the
return value.

What should it return?  Its only caller (shu-cpp-internal-sub-match-tokens) can
accept nil..

shu-cpp-match-or-list - Returns nil if there was no match
   Called by shu-cpp-match-evaluate-side-list



shu-cpp-match-repeat-sub-list - NOW Returns nil if there was no match
   Called by shu-cpp-match-repeat-list - ALWAYS returns non-nil (????)
       Called by shu-cpp-match-evaluate-side-list
          Which is called by shu-cpp-match-evaluate-side-list


shu-cpp-internal-sub-match-tokens
    Called by shu-cpp-search-match-tokens and shu-cpp-internal-match-tokens

    shu-cpp-search-match-tokens is only called by external callers
    shu-cpp-internal-match-tokens is called by external callers
       and by shu-cpp-match-many-list


If you are not going to return the rlist, how do you indicate a failure of a match?
You do not need to.  If the match fails, the rlist remains unchanged.

If the match succeeds, the caller gets back an updated rlist and an updated tlist.
If the match fails, the caller should get back nothing (nither the rlist nor the
tlist has changed) and the top level caller can resture the rlist and tlist.


shu-cpp-internal-sub-match-tokens makes no statement about whether the match
succeeded.  It merely returns mlist, rlist, and tlist.


shu-cpp-match-tokens is called externally

    it calls shu-cpp-internal-match-tokens

        it calls shu-cpp-internal-sub-match-tokens, which always returns a value

    In shu-cpp-internal-match-tokens, if one of the lists matches, it returns a
    ret-val with the updated tlist and rlist.  If none of the lists match, it
    returns nil.


 1. shu-cpp-match-evaluate-side-list has to be changed to accept a nil return
    value.  The functions that call it can accept a nil return value.  DONE.

=========================================

8 Aug 2019

shu-cpp-match-repeat-list has a fundamental problem..

If a repeat list fails on the first entry in the list, this is a "sort of" success.
You are loking for zero or more instances and you found zero.  (BTW: You might
consider having an option that says one or more instead of a blanket zero or
more). But if it fails on anything other than the first entry, it is a failure.

shu-cpp-match-repeat-sub-list does not distinguish between a failure on the first
one and a failure on any other one  It must do that or shu-cpp-match-repeat-list
cannot figure out what happened.

Then the question is, what does shu-cpp-match-repeat-list return if it gets a
failure on the first (which is a sort of success)?

The answer is simple.  shu-cpp-match-repeat-sub-list has to keep track of whether
the failure happened on the first or not.  If it happens on the first, it returns an
unmodified tlist and rlist.

shu-cpp-match-repeat-list knows that it has finished the evaluation when one of two
things happens:

 1. shu-cpp-match-repeat-sub-list returns nil

 2. shu-cpp-match-repeat-sub-list returns an unmodified tlist / rlist.  In the
    latter case the entire repeating match is considered successful.

==================================================

12 August 2019

Notes on new-rmv-using

Input is the class list for the existing shu-rmv-using.  It is an alist in which the
car is a namespace name and the cdr is a list of class names.

Invert this to get an alist in which the car is the class name and the cdr is the
namespace name.  Consider making it a hash table because you will look up every
unquoted token in the file.

Check to ensure that you do not have two class names that map to two different
namespaces.


 1. Find all occurences of "using namespace".  See shu-cpp-mch-funs-test-search-2.

 2. Go through the "using namespace" directives as follows.

    - If the first unquoted token is ewual to the global top level namespace,
      discard it..

    - Take all of the remaining names and [ut them together with "::" between each
      one.  If the top level name was Whammo and you have three names Whammo, sam,
      fred; discard "Whammo" and turn the "sam", "fred" tokens into one string:
      "sam::fred".



 2. Find all namespaces mentioned in the "using namespace" directives in the
    original class list and save them.  Discard all the rest.

    Now you have all of the class names for the using namespace directives in the
    file.  If there are any "using namespace" directives for which you do not have a
    corresponding definition in the class list, remove the "using namespace"
    directives from the namespace list.  We will not be deleting it from the file.

 3. Invert the new class list so that you have an alist with the class name as the
    car and the namespace name as the cdr.  If you have a class name that maps to
    more than one namespace name, quit.  You have an unresolvable ambiguity.

    Consider putting this new alist into a hash table since you will be searching it
    for each unquoted token in the file.




==================================

18 August 2019

More things to add to shu-cpp-match:

 1. The ability to invoke an arbitrary function.

    For example, when scanning a type backwards, one might encounter ">", which
    is the end of some number of template arguments.  You need some way to
    inhale everything between the ">" and its matching "<".  Then you find the
    location of the first thing following the "<" and the last thing following
    the ">" and you get that string out of the buffer.  Now you have one string
    that represents the entire set of template parameters.

    Perhaps instead of an arbitrary function, you have an op code that
    says gather up everything between the matching whatevers ("{" and "}", or "<"
    and ">" or "(" and ")".


============================================================

14 September 2019

New rmv-using

 1. Find all occurrences of "using name" and "using namespacd name"

 2. Make one list of the "using namespace name" entries and a separate list of the
    "using name" entries.

    From "using namespace name":
      1. Start and and of the statement,
      2. The string that is the fully qualified namespace name minus the global name

    From "using name"
      1. Start and and of the statement,
      2. The string that is the fully qualified namespace name minus the global name
      3. The class name (e.g., "string" from "uaing std::string;"

 3. Select from the class list all of the namespace names in the list of "using
     namespace name" stataments.  If there is a "using namespces name" statement
     that does not have an entry in the class list, we will not be using it.

============================================================

15 September 2019

Need two simple functions:

 1. Given an rlist that contains "using namespace name", return a string that is the
    fully qualified namespace name.  If the first nae is the top level name, it has
    been removed.

 2. Given an rlist that contains "using name", return
    a. The string that is the fully qualified namespace name (with optional top
    level name removed from the front)
    b. The srting that is the class name

DONE THE ABOVE

============================

Next steps

 1. Invoke shu-match-find-all-using-internal
    This returns two lists
    a. All instances of "using namespace name"
    b. All instances of "using name"

 2. Go through all "using namespace name".  For each one:
    a. Call shu-match-using-namespace-string to find the namespace name
    b. Look up the namespace in the class list
       If found, then
       1. Add the rlist to a list of rlists that will be processed
          proc-rlists
       2. Add the class list entry to a list of class list entries that will be
          processed. - proc-classes
       If not found, then
       1. Add the rlist to a list of rlists that will not be processed
          np-rlists

====================================

New next steps

 - Merge in the "using name" statements

 - Loop through un-list

 - Call shu-match-using-string to get both the nanespace and the class name
   - Look up the namespace in the class list, adding it if not found
   - Add the class name to the class list, if not already present

     There are two ways to do this.  One is to add the name if it is not
     already a (member) of the list.  Probably safer to just add the name and then
     run all of the class list through delete-dups.  This protects from an input
     class list that has duplicates.

- Invert the class list

  - Instead of an Alist in which a namespace maps to a list of class names, you want
    a hash table in which a class name maps to its containing namespace.  If a
    single class maps to more than one namespace, you cannot proceed.


========================

New new next steps ...

Remove proc-rlists from the token list

  1. Sort proc-rlists with the key for each rlist being the spoint of its first
     token-info.

1. Move to first rlist

loop

1. Find the spoint and epoint of the current rlist
2. Loop through the token list (always keeping a pointer to the prior token-info)
   until you find the token-info whose spoint matches the rlist spoint.  This is the
   first token-info to be removed from the list.
3. Loop through the token list until you find the token-info whose epoint matches
   the rlist epoint.  THis is the last one to be removed from the list.


Once you have the inverted class list, you have only two steps left..

  1. Erase the using namsepace statements (shu-erase-region) as well as the using
     statements.

  2. Go through the tokens backward.  Each time you find an unquoted token look it
     up in the hash table.  If it is in the hash table, check to see if the
     followig token (You are going backwards( is "::" (Remember to skip the
     comments).  If it is not "::", goto-char of start of class name.  Insert the
     namespace followed by "::"..


============================================

Final zinger

 - In looking for class names to qualify, we need to consider not just whether the
   name is prefixed by "::"

   Prefix of "::" indicates qualified
   Prefix of "." or "->" means probably function name
   Followed by "(" means probably function name
   Followed by "[" means probably variable name
   If inside of an include statement, it is not a class name
     Might actually have to go to the location in the buffer and scan
     for "include" in the same line in front of the name.
