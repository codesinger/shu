12 Feb 2019


For dealing with tokens ...

Perhaps have a tokenization function that omits comments as they
are encountered?  Could simplufy subsequent processing.

Think back to the parser from RTS in Roseville.  Build a set of patterns
to match

Pointer to object

  1. Unquoted token (name)
  2. Operator "*"
  3. Unquoted token (class name)
  4. Operator "::"
  5. Unquoted token (namespace)


Const pointer to object

  1. Unquoted token (name)
  1. Unquoted token ("const")
  2. Operator "*"
  3. Unquoted token (class name)
  4. Operator "::"
  5. Unquoted token (namespace)


With the Roseville parser, you always started at the beginning of the string and
tried to match patterns against it.

In this case you are looking for a thing (semi-colon, unquoted token, etc) that
starts a pattern and then seeing if that has a pattern that matches it.

So you need an alist of things.  The key is a category, such as unquoted token, ";",
etc.  The value is a list of all of the patterns that start with that thing.
