12 Feb 2019


For dealing with tokens ...

Perhaps have a tokenization function that omits comments as they
are encountered?  Could simplufy subsequent processing.

Think back to the parser from RTS in Roseville.  Build a set of patterns
to match

Pointer to object

  1. Unquoted token (name)
  2. Operator "*"
  3. Unquoted token (class name)
  4. Operator "::"
  5. Unquoted token (namespace)


Const pointer to object

  1. Unquoted token (name)
  1. Unquoted token ("const")
  2. Operator "*"
  3. Unquoted token (class name)
  4. Operator "::"
  5. Unquoted token (namespace)


With the Roseville parser, you always started at the beginning of the string and
tried to match patterns against it.

In this case you are looking for a thing (semi-colon, unquoted token, etc) that
starts a pattern and then seeing if that has a pattern that matches it.

So you need an alist of things.  The key is a category, such as unquoted token, ";",
etc.  The value is a list of all of the patterns that start with that thing.

For finding a set of known class nsmes.

  1. Find an unquoted token

  2. See if it is one of the names we are looking for
     - If not, skip it

  3. If it is a sought after name, perhaps we can
     then use patterns to see if it is
     something we will consider to be a class name

Possible patterns to exclude a potential class name

  1. Is a C++ key word.  Be careful here.  "return" is a key word.  "right" and
     "setw" are class names.

  2. Does not match syntax of a class name

  3. Followed by "="

  4. Preceded by "->"

  5. Preceded by "."

  6. Preceded by {"#" "include" "<"} or by {"#" "include" "\""}

  7. Followed  by ";"??


============================================

- Each time you find an unquoted token that is not "namespace", save it.

- If you find namespace followed by using, you have one


18 Feb 2019

Things in the pattern list

  1. Op code
  2. Token type
  3. Comparison value
  4. Valuation function
  5. Return value indicator


============================================

Two things have to change.

  DONE 1. You cannot just use cons cells to build up a match list.  If you want to change
     the format of the match list, all of your manually =built lists are rubbish.

  DONE 2. There has to be a match type that is "pointer to other match list", perhaps
     with a count.

     Right now, the lists for "using namespace" come in mseveral flavors:

       using namespace a
       using namespace a::b
       using namespace a::b::c

     Each one is a saparate list.  Yoiu could have "using namespace a" followed by
     pointer to list of "::" followed by unquoted token and give a count of three.
     So the sub list may match up to three times to be considered successful, or
     something like that.

  3. Once you have a side pointer to another list to follow, you can also use that
     side pointer for a list of alternatives. e.g.,

               1. Keyword class
               2. Unquoted token
               3. "{" or ":"

  4, You can also use the side pointer for a list to be mached zero or more times

               1. Keyword class
               2. Unquoted token
               3. size list of "::" followed by unquoted toek

     If the side list is not matched at all, you have a simple class name.
     If it is matched once, you have a::b, etc.


============================================


11 March 2019

Re-think the real meaning of shu-cpp-match-repeat-list.

It is a function that can never fail.  It either harvests some repeating information
and advances the token list or it does nothing,  In either case, the scan resumes
with the new token-list (which my be unchanged).


============================================


22 July 2019

 1. The current side list functions assume that the rlist is empty on entry.  They
    build an rlist and then nreverse the whole thing.

 2. Need some unit tests that call the side list functions with an existing,
    non-empty rlist to make sure that they just add their stuff at the end.

 3. Have a new function similar to shu-cpp-token-show-token-info in shu-cpp-token.el
    that can print an entire match list.  It is shu-cpp-token-show-match-list in
    shu-cpp-match.el.  Needs some clean up.
