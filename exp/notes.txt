;;; notes.txt --- Shu project code for dealing wth C++ in Emacs
;;
;; Copyright (C) 2020 Stewart L. Palmer
;;
;; Author: Stewart L. Palmer <stewart@stewartpalmer.com>
;;
;; This file is NOT part of GNU Emacs.
;;
;; This is free software: you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This software is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; There is a copy of the Gnu General Public license in the file
;; LICENSE in this repository.  You should also have received a copy
;; of the GNU General Public License along with GNU Emacs.  If not,
;; see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; Some personal notes about things I might or might not be planning
;; to do in the future.
;;
;;


In the current shu-project, shu-cpp-class-list is only used for the completing read
of a file name.

In the new shu-project, shu-cpp-class-list (or something like it) will also be used
for list-c-project.

So we need two versions of shu-cpp-class-list.  One of them only contains the actual
file names and is used for list-c-project.  The other one contains both the actual
file names and the short file names and is used for the completing read.


Next steps.

1. Write a function that creates a short name from a long name

    Server.cpp         ==> server.cpp
    abcdec_mumble.cpp  ==> mumble.cpp
    s_server_thing.cpp ==> thing.cpp

2. After renew-c-project generates its key list, call shu-cpp-project-collapse-list
   and save the result for use by shu-list-project.

   Then renew-c-project should generate a second key list in which all of the file
   name keys have been transformed to short names.  If a short name is the same as
   the non-short name, do not save the entry.

   Then merge the two lists so that shu-cpp-finish-project can save the combined
   result in shu-cpp-class-list for use by completing read.

   Merge the two lists using (nconc) or (append).

3. If we are using short names (some sort of defconst??), then do not put the prefix
   in the prompt area for the completing read.

To see if a file name contains an underscore

   (let (
        (underscore (regexp-quote "_"))
        )
   (when (string-match underscore file-name) ...)

         or

   (when (string-match-p underscore file-name) ...)

The latter does not change the match data

Something to ponder.  Do we want to go through all of the file names looking for a
common prefix?  Or for a small number of them?


OTHER STUFF:

renew-c-project displays number of h files, c files, and dup names.

Now that we can derive the counts from a project list, renew-c-project should
display both the old and new counts if there is a former project.

Add some more show functions to show things like short to long name mappings, etc.


WHAT ARE WE STORING?

shu-cpp-completing-list is the list used for the completing read.  If
shu-cpp-project-short-names is non-nil, this holds both the long and short names.

shu-cpp-class-list is the list used for everything other than completing read.  It
never holds short names.

DAYLIGHT SAVINGS TIME

https://en.wikipedia.org/wiki/History_of_time_in_the_United_States

====================

Inverting an alist

Current class list has namespace as a key and the car is a list of classes that
belong to that namespace.

Need something that will invert that

The key is a class name and the car is a list of namespaces to which that class belongs

================================================

rlist and token-list return values

The functions all accept arguments of rlist and token-list.

If the match succeeds, tokens may have been pushed onto rlist and token-list will be
advanced.  If the match fails, who restores these?

There are a couple of places.  If shu-cpp-match-tokens completely fails, it will
return nil and the caller still has the original values.  If the caller found some
trigger to start a match (such as keyword "using"), it will have to manually advance
token-list by one.

If one of the lists passed to shu-cpp-match-tokens fails, shu-cpp-match-token has to
restore both the original rlist and the original token-list in order to get a fresh
start for the next list.  But a new rlist and new token-list are only passed back if
a match succeeds.

The side list functions will either return new values or nil.  So they can continue
to work in the originals, passing back either the updated values or nil.

So it appears that the only function that has to save and restore the original
values is shu-cpp-match-tokens, which has to restore the originals at the start of
each new list.

Need a side list that is a set of lists to pursue.  So we can have a match that is
"using" followed by "namespace" followed by a set of lists, each of which matches
one of the three forms of using namespace.

Scan through the tokens until you find keyword "using".  Try to match the above
pattern.  If it matches you have found an occurrence of "using namespace".  If it
does not match, advance the token list by one and start again.

=================================================================

See
https://stackoverflow.com/questions/12999530/is-there-a-function-that-joins-a-string-into-a-delimited-string

New library subr-x.el for misc helper functions

hash-table-keys
hash-table-values
string-blank-p
string-empty-p
string-join
string-reverse
string-trim-left
string-trim-right
string-trim
string-remove-prefix
string-remove-suffix

=======================================================================

Useful resource: http://joelmccracken.github.io/entries/reading-writing-data-in-emacs-batch-via-stdin-stdout/
